*py_os_process.txt*

			Python - os - process
------------------------------------------------------------------------------
						*py-os-process*

------------------------------------------------------------------------------
						*py-os-process-abort*
*abort* 		向当前进程发送信号

For example:
>
  # 向当前进程发送信号
  os.abort()
<
------------------------------------------------------------------------------
						*py-os-process-fork*
*fork*			创建子进程
*forkpty*		创建子进程,以伪终端方式执行,返回(pid, fd)

For example:
>
  # 创建子进程，子进线程返回0，主线程返回pid
  os.fork()
  os.forkpty()
<
------------------------------------------------------------------------------
						*py-os-process-kill*
*kill*			发送信号(pid, sig)

For example:
>
  # 创建子进程，子进线程返回0，主线程返回pid
  kill(pid, sig)
<
------------------------------------------------------------------------------
						*py-os-process-popen*
*popen*			管道

For example:
>
  # 使用管道执行ls命令 
  fd = os.popen('cat ./os_process.py', mode='r')
  print(fd.readlines())
<
------------------------------------------------------------------------------
						*py-os-process-wait*
*wait*			阻塞等待子进程返回
*waitpid*		阻塞等待一个或多个进程返回

For example:
>
  # 阻塞等待子进程返回 
  pid = os.fork()
  if pid:
    os.wait()

  # 阻塞等待一个或多个进程返回
  if pid:
    os.wait(pid, 0) # pid = -1 = wait, pid = 0 同组
<
------------------------------------------------------------------------------
 vim:tw=78:ts=8:ft=help:norl:
